// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.



#include "SetpointCommand1.h"
#include <fstream>
#include <iostream>

SetpointCommand1::SetpointCommand1() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::pIDTal);
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

// Called just before this Command runs the first time
void SetpointCommand1::Initialize() {

	Robot::pIDTal->quadratureEncoder->Reset();
	Robot::pIDTal->quadratureEncoder->SetDistancePerPulse(6.675884389/160);		//the circumference of the gear is 6.675...
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZE				// with 160 counts in a revolution of the encoder
	Robot::pIDTal->Enable();
	Robot::pIDTal->SetSetpoint(100);		//the distance the gear is supposed to travel
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZE

	//6.675884389inches circumference

}

// Called repeatedly when this Command is scheduled to run
void SetpointCommand1::Execute() {
/*
	float raw = Robot::pIDTal->quadratureEncoder->Get();
	if(raw >159)
		Robot::pIDTal->tal->Set(0);
	else
		Robot::pIDTal->tal->Set(.07);
	float feet = Robot::pIDTal->quadratureEncoder->GetDistance();
	float period = Robot::pIDTal->quadratureEncoder->GetRate();
	printf("count: %f Feet %f period: %f PID: %f\n",raw,feet,period,Robot::pIDTal->PIDGet());
*/}

// Make this return true when this Command no longer needs to run execute()
bool SetpointCommand1::IsFinished() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ISFINISHED
	printf("done");
	return Robot::pIDTal->OnTarget();
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ISFINISHED
}

// Called once after isFinished returns true
void SetpointCommand1::End() {
	
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void SetpointCommand1::Interrupted() {

}
